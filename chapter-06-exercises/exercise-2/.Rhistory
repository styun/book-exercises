# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
?substr
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar())
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub
fruits_e <- gsub(a, ee, fruits)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
print(lyric_e)
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
source('~/Desktop/book-exercises/chapter-06-exercises/exercise-2/exercise.R')
add_three <- function(number)
return(number + 3)
2
print(add_three(2))
source('~/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R')
source('~/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R')
total_inches <- feet * 12 + inches
total_inches <- 5 * 12 + 8
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 8)
source('~/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R')
source('~/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R')
source('~/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R')
source('~/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R')
print(names)
names <- c("Samuel", "John", "Ethan")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length_n <- length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
seq?
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
seq()?
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
?seq
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
?seq()
m <- seq(10,1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5,10,0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21,30)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:21
print(first_ten)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
print(first_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- paste(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten:next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- seq(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
print(eleventh)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers(c(2,5))
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[c(2,5)]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[c(2:5)]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c{1:100}
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(1:100)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(1:100)[seq(1,100,2)]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(1:100)[seq(0,100,2)]
print(even)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[c(2:5)]
print(some_numbers)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Exercise 2: indexing and filtering vectors
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
print(first_ten)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21,30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
print(eleventh)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[c(2:5)]
print(some_numbers)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(1:100)[seq(0,100,2)]
print(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
# Create a vector `prefix` that has the first three elements of `phone_numbers`
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even % 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
?all()
all(even % 2 = 0)
all(even %% 2 = 0)
all(even %% 2 <- 0)
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[c(1:3)]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- replace(phone_numbers, large, 5)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- replace(phone_numbers, large, 5)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- replace(phone_numbers, large, 5)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
?replace()
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
phone_numbers <- replace(phone_numbers, 5, large)
phone_numbers <- gsub(phone_numbers, large, 5)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
phone_numbers <- replace(phone_numbers, large, 5)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace every odd-numbered value in `phone_numbers` with the number 0
?seq()
is_odd <- phone_numbers %% 2 == 1
phone_odd <- phone_numbers[is_odd]
large_index <- phone_numbers[large]
large_index <- phone_numbers[c(large)[]]
print(c(large))
print(c(large)[])
print([c(large)])
